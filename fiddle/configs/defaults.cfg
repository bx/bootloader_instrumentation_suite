[Main]
name = "default"
root = '~/test_utils/{Main.name}'
cc = '/usr/bin/'
hardwareclass = '_hw'
hw_info_path = "{Main.test_suite_dir}/fiddle/hw_info"
test_data_path = "{Main.root}/results"

[HardwareClass._hw]
	hw_info_path = "{Main.hw_info_path}/{HardwareClass._hw.name}"
	hosts = ['_plain']
	addr_range = [0x00000000, 0xffffffffffffffff]	

[Target]
	software = "_test"
	default_stages = ['_single']

[HostConfig]
	[HostConfig._plain]
	tracing_methods = ['breakpoint', 'calltrace', 'enforce']

[Software]
	[Software._test]
	root = "{Main.root}/{Software._test.name}"
	build = true
	clean = "make clean"
	build_prepare = "./configure"
	build_cmd = "make"
	compiler = "/usr/bin/gcc"	
	[Software._test.Files.target]
	  relative_path = "test"
	  type = "image"
	
	[Software.hook_write]
	build = false
	root = '{Main.test_suite_dir}/fiddle_gdb'
	binary = '{Software.hook_write.root}/hook_write.py'


	[Software.gdb]
	build = false	
	root = '~/software/gcc-linaro-5.3-2016.02-x86_64_arm-eabi/bin'
	binary = '{Software.gdb.root}/arm-eabi-gdb'

	[Software.calltrace]
	build = false	
	root = '{Main.test_suite_dir}'
	binary = '{Software.calltrace.root}/fiddle_gdb/calltrace.py'
	
	[Software.unicorn]
	build = false	
	root = '{Main.test_suite_dir}'
	binary = '{Software.calltrace.root}/fiddle_gdb/unicorn_trace.py'

	[Software.enforce]
	build = false	
	root = '{Main.test_suite_dir}'
	binary = '{Software.enforce.root}/fiddle_gdb/enforce.py'

	[Software.gdb_tools]
	build = false	
	root = '{Main.test_suite_dir}'
	binary = '{Software.gdb_tools.root}/fiddle_gdb/gdb_tools.py'

	[Software.gdb_tools.GDBConfig]
	commands = ["python execfile(\"{Software.gdb_tools.binary}\")",
		 "gdb_tools dir {runtime.python_path}",
		 "gdb_tools update_path",
	]


[TargetStage]	
	[TargetStage._single]
	elf = '{Software._test.Files.target.relative_path}'
	minpc = -1
	maxpc = -1
	exitpc = -1
	entrypoint = -1
	image_size = -1


[TraceMethod]
	 run = "I_CONF={config} {Software.gdb.binary} -ex 'set environment I_CONF={config}' {TraceMethod.gdb_commands} -ex 'gdb_tools go -p' -ex 'c'  -ex 'monitor quit' -ex 'monitor exit' -ex 'q' && true"

       [TraceMethod.breakpoint]
       software = ["gdb_tools", "qemu", "hook_write"]

       
       [TraceMethod.breakpoint.GDBConfig]
	   commands = ["gdb_tools plugin {Software.hook_write.binary}",
	   	       "gdb_tools stages {runtime.enabled_stagenames}",
		       "gdb_tools enable_policy {runtime.stage}",	
		       "hookwrite test_instance {runtime.instance_id}",
		       "hookwrite test_trace {runtime.trace.id}",
		       "hookwrite kill",]

       [TraceMethod.breakpoint.Files.db]
       type = "target"
       relative_path = "trace.h5"
       global_name = "runtime.trace.db.{runtime.stage}"

       [TraceMethod.calltrace]
       software = ["gdb", "gdb_tools", "calltrace"]

       [TraceMethod.calltrace.Files.org]
       type = "target"
       relative_path = "calltrace.org"
       
       #[TraceMethod.calltrace.Files.dep]
       #type = "file_dep"
       #subtype = "stage_dependent"
       #path = "{static_analysis.db}"
       
       [TraceMethod.calltrace.GDBConfig]
	   commands = ["gdb_tools plugin {Software.calltrace.binary}",
		       "calltrace test_instance {runtime.instance_id}",
		       "calltrace test_trace {runtime.trace.id}",
		       'calltrace no_recursion {runtime.trace.host_configs.calltrace_no_recursion}',
		       'calltrace blacklist {runtime.trace.host_configs.calltrace_blacklist_{runtime.stage}}',
		       'calltrace stage_log {runtime.stage} {TraceMethod.calltrace.Files.org.{runtime.stage}}',
		       'calltrace sourceinfo',
		       'calltrace kill'
	   ]              

       [TraceMethod.enforce]
       software = ["gdb_tools", "enforce"]       

       [TraceMethod.unicorn]
       software = ["gdb", "gdb_tools", "unicorn"]
       
       [TraceMethod.unicorn.Files.db]
       type = "target"
       relative_path = "trace.h5"
       global_name = "runtime.trace.db.{runtime.stage}"

       [TraceMethod.unicorn.GDBConfig]
	   commands = ["gdb_tools plugin {Software.unicorn.binary}",
	   	       "gdb_tools enable_policy {runtime.enabled_stagenames}",
		       "unicorn test_instance {runtime.instance_id}",
		       "unicorn test_trace {runtime.trace.id}",
		       'unicorn no_run',
		       'unicorn kill'
	   ]



[PostProcess.consolidate_writes]
  function = "_histogram"
  supported_traces = ["breakpoint", "framac"]

[PostProcess.browse_db]
  function = "_browse_db"
  supported_traces = ["breakpoint", "framac", "watchpoint", "unicorn"]


[PostProcess.policy_check]
  function = "_policy_check"
  supported_traces = ["breakpoint", "framac"]

  [PostProcess.consolidate_writes.Files.el_file]
	  relative_path = "substages.el"
	  type = "target"

  [PostProcess.consolidate_writes.Files.range_txt]
	  relative_path = "write_range_info.txt"
	  type = "target"



  [PostProcess.consolidate_writes.Files.range_csv]
	  relative_path = "write_range_info.csv"
	  type = "target"


  [PostProcess.consolidate_writes.Files.fn_lists]
	  relative_path = "fn_lists"
	  type = "target"

[PostProcess.process_watchpoints]
	function = "_watchpoints"
       [PostProcess.process_watchpoints.Files.db]
       type = "output"
       path = "{runtime.trace.db.{runtime.stage}}"


[PostProcess.noop]

